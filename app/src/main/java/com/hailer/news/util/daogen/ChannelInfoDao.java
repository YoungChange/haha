package com.hailer.news.util.daogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hailer.news.util.bean.ChannelInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL_INFO".
*/
public class ChannelInfoDao extends AbstractDao<ChannelInfo, Long> {

    public static final String TABLENAME = "CHANNEL_INFO";

    /**
     * Properties of entity ChannelInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CategoryName = new Property(1, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategorySlug = new Property(2, String.class, "categorySlug", false, "CATEGORY_SLUG");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Sign = new Property(4, boolean.class, "sign", false, "SIGN");
    }


    public ChannelInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CATEGORY_NAME\" TEXT UNIQUE ," + // 1: categoryName
                "\"CATEGORY_SLUG\" TEXT," + // 2: categorySlug
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"SIGN\" INTEGER NOT NULL );"); // 4: sign
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannelInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(2, categoryName);
        }
 
        String categorySlug = entity.getCategorySlug();
        if (categorySlug != null) {
            stmt.bindString(3, categorySlug);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindLong(5, entity.getSign() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannelInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(2, categoryName);
        }
 
        String categorySlug = entity.getCategorySlug();
        if (categorySlug != null) {
            stmt.bindString(3, categorySlug);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindLong(5, entity.getSign() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChannelInfo readEntity(Cursor cursor, int offset) {
        ChannelInfo entity = new ChannelInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // categoryName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categorySlug
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.getShort(offset + 4) != 0 // sign
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChannelInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategorySlug(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSign(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChannelInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChannelInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChannelInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
